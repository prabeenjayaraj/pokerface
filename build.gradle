group 'org.jpr.poker'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'


sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    guavaVersion = '19.0'
    lombokVersion = '1.16.6'
    commonsLangVersion = '3.7'
    beanRandomizerVersion = '3.7.0'
}



dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile "org.projectlombok:lombok:$lombokVersion"
    compile "com.google.guava:guava:$guavaVersion"
    compile "org.apache.commons:commons-lang3:3.0"
    compile "commons-io:commons-io:2.6"
    compile "io.github.benas:random-beans:$beanRandomizerVersion"
    compile "io.github.benas:random-beans-randomizers:$beanRandomizerVersion"


}

checkstyle {
    toolVersion '7.8.1'
    configFile file("config/checkstyle/checkstyle.xml")

}

checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}

jar {
    manifest {
        attributes 'Main-Class': 'org.jpr.poker.PokerFace'
    }
}
tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/checkstyle/xsl/checkstyle.xsl')
    }
}

findbugs {
    ignoreFailures = false
    toolVersion = "3.0.1"
    sourceSets = [sourceSets.main]
//    excludeFilter = file("config/findbugs/excludeFilter.xml")
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}


tasks.withType(Pmd) {
    reports {
        xml.enabled false
        html.enabled true
    }


}

test {
    ignoreFailures = true
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    executionData(test)
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.6
            }
        }
    }
}

task pokerJar(type: Jar) {
        manifest {
            attributes 'Implementation-Title': 'Poker Hand Finder',
                    'Implementation-Version': version,
                    'Main-Class': 'org.jpr.poker.PokerFace'
        }
        baseName = project.name + '-all'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

// to run coverage verification during the build
    check.dependsOn jacocoTestCoverageVerification